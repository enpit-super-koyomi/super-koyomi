datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Authenticator Authenticator[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    courses Course[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model Course {
    code String @unique @id
    name String
    credits Int
    overview String
    remarks String
    type Int
    recommendedGrade Int[]
    schedules CourseSchedule[]
    users User[]
    instructor String
    error Boolean
    lastUpdate DateTime
}

model CourseSchedule {
    module Module
    day Day
    period Int
    room String
    courseCode String
    course Course @relation(fields: [courseCode], references: [code])
    @@id([module, day, period, room])
}

enum Module {
    SpringA
    SpringB
    SpringC
    FallA
    FallB
    FallC
    SummerVacation
    SpringVacation
    Annual
    Unknown
}

enum Day {
  Sun
  Mon
  Tue
  Wed
  Thu
  Fri
  Sat
  Intensive
  Appointment
  AnyTime
  Unknown
}