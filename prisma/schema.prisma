datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Authenticator Authenticator[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    friendsWithEarlierId Friendship[] @relation(name: "friendsWithEarlierId")
    friendsWithLaterId   Friendship[] @relation(name: "friendsWithLaterId")
    FriendToken          Token[]
}

model Friendship {
    user1   User   @relation(name: "friendsWithEarlierId", fields: [user1Id], references: [id])
    user1Id String @map("user1Id")
    user2   User   @relation(name: "friendsWithLaterId", fields: [user2Id], references: [id])
    user2Id String @map("user2Id")

    @@id([user1Id, user2Id])
}

model Token {
    id        String   @id @default(cuid())
    token     String   @unique
    owner     User     @relation(fields: [ownerId], references: [id])
    ownerId   String
    createdAt DateTime @default(now())
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}
